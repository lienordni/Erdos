import math

def iridium(n): # Awesome Function
	if(n<2047):
		return [2]
	if(n<1373653):
		return [2,3]
	if(n<9080191):
		return [31,73]
	if(n<25326001):
		return [2,3,5]
	if(n<4759123141):
		return [2,7,61]
	if(n<1122004669633):
		return [2,13,23,1662803]
	if(n<2152302898747):
		return [2,3,5,7,11]
	if(n<3474749660383):
		return [2,3,5,7,11,13]
	if(n<341550071728321):
		return [2,3,5,7,11,13,17]
	if(n<3825123056546413051):
		return [2,3,5,7,11,13,17,19,23]
	if(n<318665857834031151167461):
		return [2,3,5,7,11,13,17,19,23,29,31,37]
	if(n<3317044064679887385961981):
		return [2,3,5,7,11,13,17,19,23,29,31,37,41]

def power_modulo(x,y,n):
	if(y==0):
		return 1
	if(y==1):
		return x%n
	if(y%2==0):
		z=power_modulo(x,y//2,n)
		return (z*z)%n
	return (x*power_modulo(x,y-1,n))%n

def lienprime(n): # Needs iridium() and power_modulo()
	if(n<2):
		return False
	if(n==2):
		return True
	d=n-1
	s=0
	while(d%2==0):
		d//=2
		s+=1
	
	for a in iridium(n):
		x=power_modulo(a,d,n)
		if(x==1):
			continue
		over=False
		for r in range(0,s):
			if(x==n-1):
				over=True
				break
			x=(x*x)%n

		if(over):
			continue

		return False

	return True

def primefac(n): # Needs math
	d=2
	i=-1
	factors=[]
	indices=[]
	while(n>1):
		if(n%d==0):
			i+=1
			factors.append(d)
			indices.append(0)
		while(n%d==0):
			indices[i]+=1
			n//=d
		d+=1
		if(d>int(math.sqrt(n))):
			break
	if(n>1):
		factors.append(n)
		indices.append(1)
	return [factors,indices]

def inc(x,y): # Increments a number array x with variable base array y # Needs nothing
	l=len(y)
	if(x[l-1]!=y[l-1]-1):
		x[l-1]+=1
		return x

	p=l-1
	while p>=0:
		if(x[p]!=y[p]-1):
			x[p]+=1
			for k in range(p+1,l):
				x[k]=0
			return x
		p-=1
	for i in range(0,l):
		x[i]=0
	return x

def power(a,b): # = product(a[i]**b[i]) # Needs Nothing
	s=1
	for i in range(0,len(a)):
		s*=a[i]**b[i]
	return s

def factors(n): # Needs primefac(), inc(), power(), math
	f=primefac(n)
	p=f[0]
	i=f[1]
	y=[]
	number=1
	for k in range(0,len(i)):
		y.append(i[k]+1)
		number*=i[k]+1
	x=[0]*len(p)
	ans=[]
	for k in range(0,number):
		ans.append(power(p,x))
		inc(x,y)
	ans.sort()
	return ans

def new(n,l):
	count=0
	for i in l:
		if n%i==0:
			count+=1
	return count

s=1
t=1
i=0
qwe=0
l=[]
limit=10**3
while True:
	t=1
	if (s*s+1)//2>limit:
		break
	while t<s:
		p=(s*s+t*t)//2
		if p>limit:
			t+=2
			continue		
		i+=1
		print(i,p,new(p,l))
		# input()
		n=(limit)//p

		if new(p,l)==0:
			l.append(p)
			qwe+=p*n*(n+1)//2
			print("+++++++",p*n*(n+1)//2)
			t+=2
			continue
		if new(p,l)>1:
			qwe-=((new(p,l)-1)/new(p,l))*p*n*(n+1)//2
			print("------",p*n*(n+1)//2)
		t+=2
	s+=2

print("Final Answer : ",qwe)
print(sum([5,10,13,15,17,20,25,26,29,30,34,35,37,39,40,41,45,50,51,52,53,55,58,60,61,65,68,70,73,74,75,78,80,82,85,87,89,90,91,95,97,100,101,102,104,105,106,109,110,111,113,115,116,117,119,120,122,123,125,130,135,136,137,140,143,145,146,148,149,150,153,155,156,157,159,160,164,165,169,170,173,174,175,178,180,181,182,183,185,187,190,193,194,195,197,200,202,203,204,205,208,210,212,215,218,219,220,221,222,225,226,229,230,232,233,234,235,238,240,241,244,245,246,247,250,255,257,259,260,261,265,267,269,270,272,273,274,275,277,280,281,285,286,287,289,290,291,292,293,295,296,298,299,300,303,305,306,310,312,313,314,315,317,318,319,320,323,325,327,328,330,333,335,337,338,339,340,345,346,348,349,350,351,353,355,356,357,360,362,364,365,366,369,370,371,373,374,375,377,380,385,386,388,389,390,391,394,395,397,400,401,403,404,405,406,407,408,409,410,411,415,416,420,421,424,425,427,429,430,433,435,436,438,440,442,444,445,447,449,450,451,452,455,457,458,459,460,461,464,465,466,468,470,471,475,476,477,480,481,482,485,488,490,492,493,494,495,500,505,507,509,510,511,514,515,518,519,520,521,522,525,527,530,533,534,535,538,540,541,543,544,545,546,548,549,550,551,554,555,557,559,560,561,562,565,569,570,572,574,575,577,578,579,580,582,583,584,585,586,590,591,592,593,595,596,598,600,601,605,606,609,610,611,612,613,615,617,620,623,624,625,626,628,629,630,634,635,636,637,638,640,641,645,646,650,653,654,655,656,657,660,661,663,665,666,667,670,671,673,674,675,676,677,678,679,680,685,687,689,690,692,695,696,697,698,699,700,701,702,703,705,706,707,709,710,712,714,715,720,723,724,725,728,730,731,732,733,735,738,740,741,742,745,746,748,750,754,755,757,760,761,763,765,767,769,770,771,772,773,775,776,777,778,779,780,782,783,785,788,790,791,793,794,795,797,799,800,801,802,803,805,806,807,808,809,810,812,814,815,816,818,819,820,821,822,825,829,830,831,832,833,835,840,841,842,843,845,848,850,851,853,854,855,857,858,860,861,865,866,867,870,871,872,873,875,876,877,879,880,881,884,885,888,890,894,895,897,898,899,900,901,902,904,905,909,910,914,915,916,918,920,922,923,925,928,929,930,932,935,936,937,939,940,941,942,943,945,949,950,951,952,953,954,955,957,959,960,962,964,965,969,970,975,976,977,979,980,981,984,985,986,988,990,995,997,999,1000]))